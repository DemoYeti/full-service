name: build

env:
  SGX_MODE: HW
  IAS_MODE: PROD
  RUST_BACKTRACE: full
  CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
  INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css

# only perform these build steps on pre-release or forced dev build
on:
  push:
    tags:
      - 'v*-pre.*'
      - '*.dev-build.*'

jobs:
  build-and-pre-release:
    permissions:
      contents: write
    strategy:
      matrix:
        runner-tags: [[self-hosted, macOS, X64, cargo], [self-hosted, macOS, ARM64, cargo], [self-hosted, Linux, large]]
        namespace: [test, prod]
        include:
          - runner-tags: [self-hosted, macOS, X64, cargo]
            container: null
          - runner-tags: [self-hosted, macOS, ARM64, cargo]
            container: null
          - runner-tags: [self-hosted, Linux, large]
            container: mobilecoin/rust-sgx-base:latest
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet
    runs-on: ${{ matrix.runner-tags }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set build name
        echo "BUILDNAME=${{ runner.os }}-${{ runner.arch }}-${{ matrix.network }}""
      - name: Brew Bundle
        if: runner.os == 'macOS'
        run: |
          brew bundle

      - name: Consensus SigStruct
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        run: |
          cargo build --release

      - name: Copy binaries to cache folder
        run: |
          mkdir -pv build_artifacts/${{ matrix.network }}/mirror
          cp /var/tmp/*.css build_artifacts/${{ matrix.network }}
          cp target/release/full-service build_artifacts/${{ matrix.network }}
          cp target/release/transaction-signer build_artifacts/${{ matrix.network }}
          cp target/release/validator-service build_artifacts/${{ matrix.network }}
          cp target/release/wallet-service-mirror-private build_artifacts/${{ matrix.network }}/mirror
          cp target/release/wallet-service-mirror-public build_artifacts/${{ matrix.network }}/mirror
          cp target/release/generate-rsa-keypair build_artifacts/${{ matrix.network }}/mirror
          cp mirror/EXAMPLE.md build_artifacts/${{ matrix.network }}/mirror



       # NEW STUFF FOR SIGNING OSX BINARIES:
       - name: Import GPG key
        id: import_gpg
        uses: artichoke/ghaction-import-gpg@v5.1.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_SIGNING_KEY_PASSPHRASE }}
          # Get fingerprint part from sub of :
          # gpg --fingerprint --with-subkey-fingerprints codesign@artichokeruby.org
          # fingerprint: 1C4A856ACF86EC1EE841180FAF57A37CAC061452

      - name: Run Apple Codesigning and Notarization
        id: apple_codesigning
        if: runner.os == 'macOS'
        run: |
          python3 macos_sign_and_notarize.py "mcfullservice-${{ steps.current_release.outputs.tag_name }}" \
            --binary "build_artifacts/${{ matrix.network }}/full-service" \
            --binary "build_artifacts/${{ matrix.network }}/transaction-signer" \
            --binary "build_artifacts/${{ matrix.network }}/validator-service" \
            --binary "build_artifacts/${{ matrix.network }}/full-service/mirror/generate-rsa-keypair" \
            --binary "build_artifacts/${{ matrix.network }}/full-service/mirror/wallet-service-mirror-private" \
            --binary "build_artifacts/${{ matrix.network }}/full-service/mirror/wallet-service-mirror-public" \
            --resource "build_artifacts/${{ matrix.network }}/full-service/consensus-enclave.css" \
            --resource "build_artifacts/${{ matrix.network }}/full-service/ingest-enclave.css" \
            --resource "build_artifacts/${{ matrix.network }}/full-service/mirror/EXAMPLE.md" \
      
        env:
          MACOS_NOTARIZE_APP_PASSWORD: ${{ secrets.MACOS_NOTARIZE_APP_PASSWORD }}
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSPHRASE: ${{ secrets.MACOS_CERTIFICATE_PASSPHRASE }}

      - name: GPG sign Apple DMG
        id: apple_codesigning_gpg
        if: runner.os == 'macOS'
        run: |
          python3 gpg_sign.py "full-service-{{ env.BUILDNAME }}" \
            --artifact "${{ steps.apple_codesigning.outputs.asset }}"


      - name: Create Artifact
        run: |
          mkdir -pv artifact
          cd artifact && tar -czvf ${{ github.sha }}-{{ env.BUILDNAME }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: full-service_{{ env.BUILDNAME }}
          path: artifact/${{ github.sha }}-{{ env.BUILDNAME }}.tar.gz

      - name: Create Prerelease
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -pv release
          cd release && tar -czvf ${{ github.ref_name }}-{{ env.BUILDNAME }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Prerelease
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          files: |
            release/${{ github.ref_name }}-{{ env.BUILDNAME }}.tar.gz